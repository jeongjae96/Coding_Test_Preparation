# 맵: N X M 크기의 직사각형. 각각의 칸은 육지 또는 바다.
# 캐릭터는 동서남북 중 한 곳을 바라본다.
# 맵의 각 칸 (A, B): A는 북쪽으로부터 떨어진 칸의 개수, B는 서쪽으로부터 떨어진 칸의 개수.
# 캐릭터는 상하좌우 이동 가능. 바다로는 갈 수 없다.

# 1. 현재 위치에서 현재 방향을 기준으로 왼쪽 방향 (반시계 방향으로 90도 회전한 방향)부터 차례대로 갈 곳을 정한다.
# 2. 캐릭터의 바로 왼쪽 방향에 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전한 다음 왼쪽으로 한 칸을 전진한다.
# 왼쪽 방향에 가보지 않은 칸이 없다면, 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.
# 3. 만약 네 방향 모두 이미 가본 칸이거나 바다로 되어 있는 칸인 경우에는, 바라보는 방향을 유지한 채로 한 칸 뒤로 가고 1단계로 돌아간다.
# 단, 이 때 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없는 경우에는 움직임을 멈춘다.

# 캐릭터가 방문한 칸의 수를 출력.

# 입력 조건
# 첫째 줄. 맵의 세로 크기 가로 크기.
# 둘째 줄. 캐릭터가 있는 칸의 좌표 (A, B) + 방향 d.
'''
방향
- 0 : 북쪽
- 1 : 동쪽
- 2 : 남쪽
- 3 : 서쪽
'''
# 셋째 줄. 육지인지 바다인지. 맵의 외곽은 항상 바다.
# 0: 육지, 1: 바다

# 처음 캐릭터가 위치한 칸은 항상 육지.





n, m = map(int, input().split())

# 방문한 위치를 저장하기 위한 맵을 생성하여 0으로 초기화
d = [[0] * m for _ in range(n)]

# 현재 캐릭터의 X 좌표, Y 좌표, 방향을 입력받기
x, y, direction = map(int, input().split())
d[x][y] = 1 # 현재 좌표 방문 처리

# 전체 맵 정보를 입력받기
array = []

for i in range(n):
    array.append(list(map(int, input().split())))

# 북, 동, 남, 서 방향 정의
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

# 왼쪽으로 회전
def turn_left():
    global direction

    direction -= 1

    if direction == -1: direction = 3

# 시물레이션 시작
count = 1
turn_time = 0

while True:
    # 왼쪽으로 회전
    turn_left()

    nx = x + dx[direction]
    ny = y + dx[direction]

    # 회전한 이후 정면에 가보지 않은 칸이 존재하는 경우 이동 
    # + 이 코드는 맵의 외곽을 고려하지 않은 코드. 입력값에 따라 오류 발생할 수 있으나, 외곽으로 떨어지지 않는 가정 하에 입력값이 주어진다고 생각.
    if d[nx][ny] == 0 and array[nx][ny] == 0:
        d[nx][ny] = 1
        x = nx
        y = ny

        count += 1
        turn_time = 0

        continue
    # 회전한 이후에 정면에 가보지 않은 칸이 없거나 바다인 경우
    else:
        turn_time += 1

    # 네 방향 모두 갈 수 없는 경우
    if turn_time == 4:
        nx = x - dx[direction]
        ny = y - dy[direction]

        # 뒤로 갈 수 있다면 이동
        if array[nx][ny] == 0:
            x = nx
            y = ny
        # 뒤가 바다로 막혀있는 경우
        else:
            break
        turn_time = 0

# 정답 출력
print(count)
