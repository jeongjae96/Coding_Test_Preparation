'''
재귀 함수를 사용하면 컴퓨터 시스템에서는 함수를 다시 호출했을 때, 메모리 상에 적재되는 일련의 과정을 따라야 하므로 오버헤드가 발생할 수 있다.
반복문을 사용하여 오버헤드를 줄일 수 있다. 일반적으로 반복문을 이용한 dp가 더 성능이 좋다.

dp를 사용한 피보나치 수열 알고리즘 시간 복잡도: O(N)
'''

'''
Top-Down 방식: 큰 문제를 해결하기 위해 작은 문제 호출 (재귀 함수 이용하여 dp 작성)
Bottom-up 방식: 작은 문제부터 차근차근 답을 도출 (반복문 이용)
'''

# 호출되는 함수 확인

d = [0] * 100

def pibo(x):
    print('f(' + str(x) + ')', end=' ')

    if x == 1 or x == 2:
        return 1
    
    if d[x] != 0:
        return d[x]
    
    d[x] = pibo(x - 1) + pibo(x - 2)

    return d[x]

pibo(6)